const blogRouter = require('express').Router()
const Blog = require('../models/postaus')
const User = require('../models/kayttaja')
const jwt = require('jsonwebtoken')
const middleware = require('../utils/middleware')


blogRouter.get('/', async (request, response) => {
  const blogs = await Blog
    .find({})
  response.status(200).json(blogs) 
})

blogRouter.post('/', middleware.userExtractor, async (request, response) => {
  const body = request.body
  // middleware set token from header to request
  const decodedToken = jwt.verify(request.token, process.env.SECRET)
  if (!decodedToken.id) {
    return response.status(401).json({ error: 'token invalid' })
  }
  // etsitään käyttäjä tokenin id:n avulla
  const user = await User.findById(decodedToken.id)
  const blog = new Blog({
    title: body.title,
    author: body.author,
    user: user._id,
    url: body.url,
    likes: body.likes === undefined ? 0 : body.likes, 
  })
  // tallennetaan blogi
  const saveNewBlog = await blog.save()
  // lisätään blogin id käyttäjälle
  user.blogs = user.blogs.concat(saveNewBlog._id)
  // tallennetaan käyttäjätiedot
  await user.save()
  // palatetaan tallennettu blogi
  response.status(201).json(saveNewBlog)
})

blogRouter.put('/:id', middleware.userExtractor, async (request, response) => {
  const blogToUpdate = {
    title:request.body.title,
    author:request.body.author,
    url:request.body.url,
    likes:request.body.likes
  }
  const user = await request.user
  if (!user) {
    return response.status(401).json({ error: 'token invalid' })
  }
  const blog = await Blog.findById(request.params.id)
  if(blog) {
    if(user.id.toString() === blog.user.toString()) {
      await Blog.findByIdAndUpdate(request.body.id, blogToUpdate)
    }
  }
  response.status(200).end()
})
blogRouter.delete('/:id', middleware.userExtractor, async (request, response) => {
  const user = await request.user
  if (!user) {
    return response.status(401).json({ error: 'token invalid' })
  }
  const blog = await Blog.findById(request.params.id)
  if(blog) {
    if(user.id.toString() === blog.user.toString()) {
      await Blog.findByIdAndRemove(blog._id)
      await User.findByIdAndUpdate(user._id, {$pull: {blogs: blog._id}})
      return response.status(204).end()
    } 
  }
  response.status(406).json({ error: 'blog not found' })
})

module.exports = blogRouter